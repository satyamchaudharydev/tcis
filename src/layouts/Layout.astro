---
export interface Props {
	title: string;
	description: string;
	keywords: string;
}
import "../global.css"

import "swiper/css";

import "swiper/css/navigation";
import "swiper/css/pagination";

import Text from '../components/system/Text.astro'
const { title = 'Best CBSE School in Bangalore | Little Elly School', description = '', keywords = '' } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<!-- <ViewTransitions /> -->

		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/x-icon" href="/favicon.ico">
		<!-- <link rel="stylesheet" href="node_modules/@glidejs/glide/dist/css/glide.core.min.css"> -->
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<meta name="description" content={description} />
		<meta name="keywords" content={keywords}>
	
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Fasthand&family=Playfair+Display:ital,wght@0,400..900;1,400..900&family=Roboto+Mono&display=swap" rel="stylesheet">

		<script async
			src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAW4mmhYRbPA2nPi-wzuJBPalXSuInbKks&loading=async&libraries=places">
	</script>

		<!-- <l	ink rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" /> -->


	</head>
	<body>
		<slot />
		<!-- <div id="circle"></div> -->


	</body>
</html>
<style is:global>
	:root {
		--accent: 124, 58, 237;
		--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);
	}
	html {
		/* font-family: system-ui, sans-serif; */
		background-color: #fff;
		scroll-behavior:smooth;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}

	#circle {
    width: 50px;
    height: 50px;
    border-radius: 50%; /* Make it circular */
    background-color: #dbf3d9; /* Initial color */
		mix-blend-mode: difference;
    position: absolute;
		top: 0;
		left: 0;
		z-index: 9999;
    pointer-events: none; /* Ensures the circle doesn't interfere with cursor events */
}


</style>


<script>

	// import { gsap } from "gsap";
	// import { ScrollTrigger } from "gsap/ScrollTrigger";
	// import Lenis from '@studio-freight/lenis'

	// let lenis = null

	// const isPhone = window.innerWidth < 768

	// // const shouldLenis = !isPhone
	// const shouldLenis = false
	// // if url contains blog
	// if (shouldLenis) {
	// 	lenis = new Lenis({
	// 		duration: 0.6,
	// 		// easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t))
	// 	})
	
	// 	lenis.on('scroll', ScrollTrigger.update)

	// }

	// gsap.registerPlugin(ScrollTrigger);
	// if (shouldLenis && lenis) {
	// 	gsap.ticker.add((time)=>{
	// 		lenis.raf(time * 1000)
	// 	})
	
	// 	gsap.ticker.lagSmoothing(0)
	// }

	// const gsapStickyElements = document.querySelectorAll('[data-gsap-sticky]')

	// gsapStickyElements.forEach(stickyElement => {
	// 	const parentId = stickyElement.dataset.gsapSticky
	// 	const parent = document.querySelector(`[data-gsap-parent="${parentId}"]`)
	// 	if (parent) {
	// 		const parentHeight = parent.offsetHeight
	// 		console.log('Height...', parentHeight)
	// 		gsap.to(stickyElement, {
	// 			scrollTrigger: {
	// 				trigger: stickyElement,
	// 				start: 'top top',
	// 				end: () => `+=${parentHeight + stickyElement.offsetHeight + 100}`,
	// 				scrub: true,
	// 				pin: true,
	// 				pinSpacing: false
	// 			}
	// 		})
	// 	}
	// })


// 	const scrollSectionHeight = document.getElementById('scrollSection').offsetHeight;

// gsap.to("#pinSection", {
//   scrollTrigger: {
//     trigger: "#pinSection",
//     start: "top top", // When the top of the trigger hits the top of the viewport
//     end: () => `+=${scrollSectionHeight}`, // Dynamically set end based on the height of the scrollSection
//     pin: true,
//     pinSpacing: true // Adjusts document flow to avoid sudden jumps when pinning/unpining
//   }
// });


// 	const circle = document.getElementById('circle');
//  let inverted = false; // Track color state

//  document.addEventListener('mousemove', (e) => {
//      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
//      const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;

//      // Invert colors on mouse move
//      inverted = !inverted;
//      // circle.style.backgroundColor = inverted ? 'white' : 'black';
//      // circle.style.borderColor = inverted ? 'black' : 'white'; // Invert border color as well
//      // circle.style.mixBlendMode = inverted ? 'difference' : 'normal'; // Invert blend mode as well

//      // Calculate cursor position including scroll offsets
//      const cursorX = e.clientX + scrollLeft;
//     const cursorY = e.clientY + scrollTop;

//     // Use GSAP to animate the circle to follow the cursor with a swing effect
//     gsap.to(circle, {
//         x: cursorX - circle.offsetWidth / 2,
//         y: cursorY - circle.offsetHeight / 2,
//         duration: 0.5,
//         ease: "power2.out", // This creates a swinging effect
//         overwrite: 'auto' // Ensures new animations override previous ones smoothly
//     });
// });

// // hide actual cursor
// document.body.style.cursor = 'none';

</script>

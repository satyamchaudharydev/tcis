---
import Button from '../system/Button.astro'
import logo from "../../assets/logo.png";
import { Image } from 'astro:assets';
 

interface Menu {
  title: string
  link?: string
  submenu?: {
    title: string
    link: string
  }[]
}
const menu: Array<Menu> = [
  {
    title: 'Home',
    link: '/',
  },
  {
    title: 'About Us',
    link: '/about-us',
  },
  {
    title: 'Co-curriculars',
    link: '/curriculars',
  },
  {
    title: 'Branches',
    link: '/marathahalli/overview',

  },
  {
    title: 'Admissions',
    link: '/admissions',
  },
]



// get route from path
const {campusName} = Astro.params
const ctaButtons: Array<{
  title: string
  link: string | undefined,
  type?: 'primary' | 'secondary' | 'default',
  icon?: any,
  className?: string,
  menu?: boolean
  mobile?: boolean
}> = [
  {
    title: 'ENROL NOW',
    link: "",
    type: 'default',
    menu: true,
    mobile: true,
    icon: "",
  }
]

const mobileMenu = [
  ...menu,
  ...ctaButtons.filter(button =>!! button.mobile)
]
const activePath = Astro.url.pathname
---
<header  class="font-roundo w-screen bg-black py-1 px-14 max-md:px-5 box-border flex flex-row justify-between items-center backdrop-blur-md fixed z-[999] h-[100px]">
  <a href="/" class='relative z-10 daisy daisy-fixed daisy-1'>
    <Image src={logo} alt="Insight's Logo" >
  </a>
  <div class='flex flex-row items-center max-md:hidden'>
    {menu.map((item, i) => {
      if (item.submenu && item.submenu.length > 0) {
        return (
          <div class={`relative menu-parent cursor-pointer daisy daisy-2 daisy-fixed`}>
            <div class:list={['flex flex-row items-center mr-8 max-md:mr-0', i >= menu.length - 1 && 'mr-0 max-md:mr-0']}>
              {item.link ? (
                <a
                  href={item.link}
                  class:list={[
                    "text-white font-semibold hover:underline font-display",
                    (item.link === activePath || item.submenu.map(({ link }) => link).includes(activePath)) && 'text-yellow'
                  ]}
                >{item.title}</a> 
              ) : (
                <span class="text-white font-semibold hover:underline font-display">{item.title}</span> 
              )}
              <div class='w-6 h-6 ml-1'>
                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path fill-rule="evenodd" clip-rule="evenodd" d="M5.94524 9.20954C6.16089 8.95794 6.53967 8.9288 6.79127 9.14446L12.0008 13.6098L17.2103 9.14446C17.4619 8.9288 17.8407 8.95794 18.0563 9.20954C18.272 9.46113 18.2429 9.83991 17.9913 10.0556L12.3913 14.8556C12.1666 15.0482 11.835 15.0482 11.6103 14.8556L6.01032 10.0556C5.75872 9.83991 5.72958 9.46113 5.94524 9.20954Z" 
                    
                    class={(item.link === activePath || item.submenu.map(({ link }) => link).includes(activePath)) ? 'fill-yellow' : 'fill-white'}
                  />
                </svg>					
              </div>
            </div>
            <div class='absolute w-[250px] pt-[10px] menu' style={{
                boxShadow: '0px 10px 20px rgba(0, 0, 0, 0.5)',
            }}>
            <div class="w-full h-full bg-[#121212]">
              {item.submenu.map((subitem, j) => (
                <div class='py-[14px] px-3' style={{
                  borderBottom: j >= item?.submenu?.length - 1 ? 'none' : '1px solid rgba(255, 255, 255, 0.2)'
                }}>
                  <a
                    href={subitem.link}
                    class:list={[
                      "text-white font-semibold hover:underline font-display",
                      subitem.link === activePath && 'text-primary'
                    ]}
                  >{subitem.title}</a>
                </div>
              ))}
              </div>
            </div>
          </div>
        )
      } else if (item.link) {
        return (
          <a
            href={item?.link}
            class:list={[
              "text-white hover:underline mr-8 max-md:mr-0 daisy daisy-fixed daisy-2 font-display font-semibold",
              item.link === activePath && 'text-yellow'
            ]}
          >{item.title}</a>
        )
      }
    })}
  </div>
  <div class="flex gap-3">
    {
      ctaButtons.map(item => {
        if (item['data-modal-target']) {
          return (
            <div class={`${item.menu && 'max-md:hidden'} ${item?.className}`} {...item}>
              <Button
                showIcon={false}
                class="font-display border-none"
                type={item.type}
              >{item.title}</Button>
            </div>
          )
        }
        return (
          <a href={item.link} class={`${item.menu && 'max-md:hidden'} ${item?.className}`} target="_blank">
            <Button
              showIcon={false}
              class="font-display border-none"
              type={item.type}
            ><span class="text-white">{item.title}</span></Button>
          </a>
        )

      })
    }
  </div>

  <div class="max-md:block hidden">
    <form autocomplete="off">

      <div id="menuToggle">
        <input class="menu-checkbox" type="checkbox" />
        <span></span>
        <span></span>
        <span></span>
      </div>
    </form>
  </div>

  <div class="mobileMenu absolute pt- top-0 left-0 w-screen h-screen bg-black flex flex-col pt-24 overflow-scroll" class="max-md:visible hidden">
    {mobileMenu.map(item => {
      if (item.submenu && item.submenu.length > 0) {
        return (
          <div class='mobileMenuParent'>
            <div class='relative py-[14px] px-5 mr-8 max-md:mr-0 w-full' style={{ 
              borderBottom: '1px solid rgba(255, 255, 255, 0.2)'
            }}>
              <div class='flex flex-row w-full'>
                <span 
                  class="text-white font-semibold hover:underline"
                >{item.title}</span>
                <div class='w-6 h-6 ml-1 -rotate-90 menu-arrow'>
                  <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M5.94524 9.20954C6.16089 8.95794 6.53967 8.9288 6.79127 9.14446L12.0008 13.6098L17.2103 9.14446C17.4619 8.9288 17.8407 8.95794 18.0563 9.20954C18.272 9.46113 18.2429 9.83991 17.9913 10.0556L12.3913 14.8556C12.1666 15.0482 11.835 15.0482 11.6103 14.8556L6.01032 10.0556C5.75872 9.83991 5.72958 9.46113 5.94524 9.20954Z" fill="white"/>
                  </svg>					
                </div>
              </div>
            </div>
            <div class="subMenu flex flex-col">
              {item.submenu.map((subMenuItem) => (
                <a 
                  href={subMenuItem.link}
                  data-menu-mobile-item
                  class="relative py-[14px] px-5 mr-8 max-md:mr-0 w-full text-white font-semibold hover:underline pl-10"
                  style={{
                    borderBottom: "1px solid rgba(255, 255, 255, 0.2)",
                  }}
                >
                    {subMenuItem.title}
                </a>
              ))}
            </div>
          </div>
        )
      } else {
        return (
          <div class='mobileMenuParent'>
            <a data-menu-mobile-item href={item.link} class='text-white font-semibold hover:underline flex flex-row gap-2 items-center first-letter:relative py-[14px] px-5 mr-8 max-md:mr-0 w-full' style={{ 
              borderBottom: '1px solid rgba(255, 255, 255, 0.2)'
            }}>
                {item.title}
                {item.icon && (
                  <div class='w-4 h-4 ml-1 -rotate-90 menu-arrow -scale-y-100'>
                    <item.icon />
                  </div>
                )}
            </a>
          </div>
        )
      }
    })}
  </div>
  
  <div class='hidden'>
    <div style={{
      width: '18px',
      height: '1.5px',
      color: '#fff',
      backgroundColor: '#fff',
      // transform: 'rotate(180deg)',
    }}></div>
    <div style={{
      width: '18px',
      height: '1.5px',
      color: '#fff',
      backgroundColor: '#fff',
      marginTop: '3.5px'
      // transform: 'rotate(180deg)',
    }}></div>
    <div style={{
      width: '18px',
      height: '1.5px',
      color: '#fff',
      backgroundColor: '#fff',
      marginTop: '3.5px'
      // transform: 'rotate(180deg)',
    }}></div>
  </div>
</header>
<div class="h-[100px]"></div>


<style>
  .menu {
    opacity: 0;
    pointer-events: none;
    transform: translateY(10px);
    transition: all 0.3s ease;
  }
  .menu.visible {
    opacity: 1;
    pointer-events: all;
    transform: translateY(0px);
  }


  #menuToggle {
    display: block;
    position: relative;
    
    z-index: 1;
    
    -webkit-user-select: none;
    user-select: none;
  }

  #menuToggle input {
    display: block;
    width: 40px;
    height: 32px;
    position: absolute;
    top: -7px;
    left: -5px;
    
    cursor: pointer;
    
    opacity: 0; /* hide this */
    z-index: 2; /* and place it over the hamburger */
    
    -webkit-touch-callout: none;
  }

  /*
  * Just a quick hamburger
  */
  #menuToggle span {
    display: block;
    width: 25px;
    height: 2px;
    margin-bottom: 5px;
    position: relative;
    
    background: #cdcdcd;
    border-radius: 3px;
    
    z-index: 1;
    
    transform-origin: 4px 0px;
    
    transition: transform 0.5s cubic-bezier(0.77,0.2,0.05,1.0),
                background 0.5s cubic-bezier(0.77,0.2,0.05,1.0),
                opacity 0.55s ease;
  }

  #menuToggle span:first-child {
    transform-origin: 0% 0%;
  }

  #menuToggle span:nth-last-child(2) {
    transform-origin: 0% 100%;
  }

  /* 
  * Transform all the slices of hamburger
  * into a crossmark.
  */

  #menuToggle input:checked ~ span:nth-last-child(3) {
    opacity: 1;
    transform: rotate(45deg) translate(0px, -1px);
  /*   background: #232323; */
  }

  #menuToggle input:checked ~ span:nth-last-child(1) {
    opacity: 1;
    transform: rotate(-45deg) translate(1px, -2px);
  /*   background: #232323; */
  }


  /*
  * But let's hide the middle one.
  */
  #menuToggle input:checked ~ span:nth-last-child(2) {
    opacity: 0;
    transform: rotate(0deg) scale(0.2, 0.2);
  }

  /*
  * Ohyeah and the last one should go the other direction
  */
  #menuToggle input:checked ~ span:nth-last-child(2) {
    transform: rotate(-45deg) translate(0, -1px);
  }

  .mobileMenu {
    opacity: 0;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    pointer-events: none;
  }
  .mobileMenu.visible {
    opacity: 1;
    transform: translateY(0px);
    pointer-events: all;
  }

  .mobileMenuParent .subMenu {
    /* opacity: 0; */
    /* transform: translateY(-10px); */
    transition: all 0.3s ease;
    /* pointer-events: none; */
    max-height: 0;
    overflow: hidden;
  }
</style>

<script >
  const menuParent = document.querySelectorAll('.menu-parent') as NodeListOf<HTMLDivElement>
  const menuCheckBox = document.querySelector('.menu-checkbox') as HTMLInputElement
  const menuChild = document.querySelectorAll('.menu') as NodeListOf<HTMLDivElement>
  menuParent.forEach((el) => {
    let removeTimeout: any = null
    const menu = el.querySelector('.menu') as HTMLDivElement
    el.addEventListener('mouseover', () => {
      clearTimeout(removeTimeout)
      menuChild.forEach((elC) => {
        if (elC !== menu) {
          elC.classList.remove('visible')
        }
      })
      setTimeout(() => {
        menu.classList.add('visible')
      }, 0)
    })
    el.addEventListener('mouseout', () => {
      removeTimeout = setTimeout(() => {
        menu.classList.remove('visible')
      }, 50)
    })
    menu.addEventListener('mouseover', () => {
      clearTimeout(removeTimeout)
    })
    menu.addEventListener('mouseout', () => {
      // menu.classList.remove('visible')
    })
  })


  // mobile menu
  const menuToggle = document.querySelector('#menuToggle') as HTMLInputElement
  const mobileMenu = document.querySelector('.mobileMenu') as HTMLDivElement

  menuToggle.addEventListener('click', () => {
    mobileMenu.classList.toggle('visible')
  })
  const mobileMenuParents = document.querySelectorAll('.mobileMenuParent') as NodeListOf<HTMLDivElement>
  
  mobileMenuParents.forEach((el) => {
    const subMenu = el.querySelector('.subMenu') as HTMLDivElement
    el.addEventListener('click', () => {
      subMenu.classList.toggle('visible')
      if (subMenu.classList.contains('visible')) {
        subMenu.style.maxHeight = '100vh'
      } else {
        subMenu.style.maxHeight = '0px'
      }
    })
  })

  document.querySelectorAll('[data-menu-mobile-item]').forEach((el) => {
    el.addEventListener('click', () => {
      mobileMenu.classList.remove('visible')
      menuToggle.querySelector('input').checked = false
    })
  })

  // document.addEventListener('astro:beforeload', () => {
  //   console.log('helllo... 11')
  //   const path = window.location.pathname
  //   const campuseName = path.split('-')[1]
  //   const campusConfig = config.campus.find(c => c.internalName === campuseName)
  //   let admissionLink = campusConfig?.admissionLink
  //   console.log('admissionLink...')
  //   if (!admissionLink) {
  //     admissionLink = config.campus[0].admissionLink
  //   }
  //   const button = document.querySelector('.apply-now-button') as HTMLDivElement
  //   if(admissionLink){
  //     button.setAttribute('href', admissionLink)
  //   }


  //   mobileMenu.classList.remove('visible')
  //   menuCheckBox.checked = false
  // })
 
  
</script>
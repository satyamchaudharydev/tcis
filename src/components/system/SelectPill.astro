---
const {
  placeholder,
  options,
  name,
  id,
  required=true,
  title=null
} = Astro.props
---

<div class="select text-[14px] h-[48px]" data-select-parent-id={id}>
  <div class="selectWrapper">
    <select class="selectNative js-selectNative h-[48px]" aria-labelledby={name} name={name} data-id={id} required={required} title={title}>
      <option value="" disabled="" selected="">{placeholder}</option>
      {options.map((option: string) => (
        <option value={option}>
          {option}
        </option>
      ))}
    </select>

    <!-- Hide the custom select from AT (e.g. SR) using aria-hidden -->
    <div class="selectCustom js-selectCustom" aria-hidden="true" data-id={id}>
      <div class="selectCustom-trigger">{placeholder}</div>
      <div class="selectCustom-options flex flex-row flex-wrap gap-5 !px-6 justify-between">
        {options.map((option: string) => (
          <div data-value={option} class="selectCustom-option flex items-center justify-center flex-1 min-w-fit !p-2 !pl-3 !px-3 border border-[#C6C6C6] rounded-md cursor-pointer transition-all" >
            {option}
          </div>
        ))}
      </div>
    </div>
  </div>
</div>


<style>

.select.active select {
  color: black !important;
}
.select.active .selectCustom-trigger {
  color: black !important;
}

  .selectNative,
.selectCustom {
  position: relative;
  width: 100%;
  /* height: 4rem */
}

.selectCustom {
  position: absolute;
  top: 0;
  left: 0;
  display: none;
}

  @media (hover: hover) {
  .selectCustom {
    display: flex;
  }

  .selectNative:focus + .selectCustom {
    display: none;
  }
}
/* Add the focus states too, They matter, always! */
.selectNative:focus,
.selectCustom.isActive .selectCustom-trigger {
  outline: none;
  box-shadow: rgb(255, 255, 255) 0px 0px 0px 0px, rgba(59, 130, 246, 0.5) 0px 0px 0px 2px, rgba(0, 0, 0, 0) 0px 0px 0px 0px;
}

.select {
  position: relative;
}

.selectLabel {
  display: block;
  font-weight: bold;
  margin-bottom: 0.4rem;
}

.selectWrapper {
  position: relative;
  height: 100%;
}

.selectNative,
.selectCustom-trigger {
  background-color: #fff;
  border-style: inset;
  border: 1px solid #C6C6C6;
  box-shadow: #6f6f6f;
  border-radius: 0.4rem;
}

.selectNative {
  -webkit-appearance: none;
  -moz-appearance: none;
  background-image: url("data:image/svg+xml;utf8,<svg fill='grey' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l5 5 5-5z'/><path d='M0 0h24v24H0z' fill='none'/></svg>");
  background-repeat: no-repeat;
  background-position-x: 98%;
  background-position-y: 0.7rem;
  padding: 0.8rem 0.8rem;
  color: #9ca3af;
}

.selectCustom-trigger {
  /* position: relative; */
  width: 100%;
  height: 100%;
  background-color: #fff;
  
  padding: 0.8rem 0.8rem;
  color: #9ca3af;
  cursor: pointer;
}

.selectCustom-trigger::after {
  content: "â–¾";
  position: absolute;
  top: 0;
  line-height: 2.8rem;
  right: 0.8rem;
}

.selectCustom-trigger:hover {
  border-color: #5E9ED6;
}

.selectCustom-options {
  position: absolute;
  top: calc(2.8rem + 0.8rem);
  left: 0;
  width: 100%;
  border: 1px solid #c6c6c6;
  border-radius: 0.4rem;
  background-color: #fff;
  box-shadow: 0 0 4px #e9e1f8;
  z-index: 1;
  padding: 0.8rem 0;
  display: none;
}

.selectCustom.isActive .selectCustom-options {
  display: flex;
}

.selectCustom-option {
  position: relative;
  padding: 0.8rem;
  padding-left: 2.5rem;
}

.selectCustom-option.isHover,
.selectCustom-option:hover {
  background-color: #EE7F82;
  color: white;
  border-color: #f4a377;
}



</style>

<script>

  const elSelectNativeElements = document.querySelectorAll<HTMLElement>(".js-selectNative");
  const elSelectCustomElements = document.querySelectorAll<HTMLElement>(".js-selectCustom");

  elSelectCustomElements.forEach((elSelectCustom) => {
    let elSelectNative = [...elSelectNativeElements].find(elSelectNative => {
      if (elSelectNative) {
        return elSelectNative.dataset.id === elSelectCustom.dataset.id
      }
    })
    const elSelectCustomBox = elSelectCustom.children[0];
    const elSelectCustomOpts = elSelectCustom.children[1];
    const customOptsList = Array.from(elSelectCustomOpts.children);
    const optionsCount = customOptsList.length;
    const defaultLabel = elSelectCustomBox.getAttribute("data-value");
  
    let optionChecked = "";
    let optionHoveredIndex = -1;
  
    // Toggle custom select visibility when clicking the box
    elSelectCustomBox.addEventListener("click", (e) => {
      const isClosed = !elSelectCustom.classList.contains("isActive");

      if (isClosed) {
        openSelectCustom();
      } else {
        closeSelectCustom();
      }
    });
  
    function openSelectCustom() {
      elSelectCustom.classList.add("isActive");
      // Remove aria-hidden in case this was opened by a user
      // who uses AT (e.g. Screen Reader) and a mouse at the same time.
      elSelectCustom.setAttribute("aria-hidden", false);
  
      if (optionChecked) {
        const optionCheckedIndex = customOptsList.findIndex(
          (el) => el.getAttribute("data-value") === optionChecked
        );
        updateCustomSelectHovered(optionCheckedIndex);
      }
  
      // Add related event listeners
      document.addEventListener("click", watchClickOutside);
      document.addEventListener("keydown", supportKeyboardNavigation);
    }
  
    function closeSelectCustom() {
      elSelectCustom.classList.remove("isActive");
  
      elSelectCustom.setAttribute("aria-hidden", true);
  
      updateCustomSelectHovered(-1);
  
      // Remove related event listeners
      document.removeEventListener("click", watchClickOutside);
      document.removeEventListener("keydown", supportKeyboardNavigation);
    }
  
    function updateCustomSelectHovered(newIndex) {
      const prevOption = elSelectCustomOpts.children[optionHoveredIndex];
      const option = elSelectCustomOpts.children[newIndex];
  
      if (prevOption) {
        prevOption.classList.remove("isHover");
      }
      if (option) {
        option.classList.add("isHover");
      }
  
      optionHoveredIndex = newIndex;
    }
  
    function updateCustomSelectChecked(value, text) {
      const prevValue = optionChecked;
  
      const elPrevOption = elSelectCustomOpts.querySelector(
        `[data-value="${prevValue}"`
      );
      const elOption = elSelectCustomOpts.querySelector(`[data-value="${value}"`);
  
      if (elPrevOption) {
        elPrevOption.classList.remove("isActive");
      }
  
      if (elOption) {
        elOption.classList.add("isActive");
      }
      
      
      elSelectCustomBox.textContent = text;
      optionChecked = value;
      const selectParent = document.querySelector(`[data-select-parent-id="${elSelectCustom.dataset.id}"]`)
      selectParent?.classList.add('active')
    }
  
    function watchClickOutside(e) {
      const didClickedOutside = !elSelectCustom.contains(event.target);
      if (didClickedOutside) {
        closeSelectCustom();
      }
    }
  
    function supportKeyboardNavigation(e) {
      // press down -> go next
      if (event.keyCode === 40 && optionHoveredIndex < optionsCount - 1) {
        let index = optionHoveredIndex;
        e.preventDefault(); // prevent page scrolling
        updateCustomSelectHovered(optionHoveredIndex + 1);
      }
  
      // press up -> go previous
      if (event.keyCode === 38 && optionHoveredIndex > 0) {
        e.preventDefault(); // prevent page scrolling
        updateCustomSelectHovered(optionHoveredIndex - 1);
      }
  
      // press Enter or space -> select the option
      if (event.keyCode === 13 || event.keyCode === 32) {
        e.preventDefault();
  
        const option = elSelectCustomOpts.children[optionHoveredIndex];
        const value = option && option.getAttribute("data-value");
  
        if (value) {
          elSelectNative.value = value;
          updateCustomSelectChecked(value, option.textContent);
        }
        closeSelectCustom();
      }
  
      // press ESC -> close selectCustom
      if (event.keyCode === 27) {
        closeSelectCustom();
      }
    }
  
    // Update selectCustom value when selectNative is changed.
    elSelectNative.addEventListener("change", (e) => {
      const value = e.target.value;
      const elRespectiveCustomOption = elSelectCustomOpts.querySelectorAll(
        `[data-value="${value}"]`
      )[0];
  
      updateCustomSelectChecked(value, elRespectiveCustomOption.textContent);
    });
  
    // Update selectCustom value when an option is clicked or hovered
    customOptsList.forEach(function (elOption, index) {
      elOption.addEventListener("click", (e) => {
        const value = e.target.getAttribute("data-value");
  
        // Sync native select to have the same value
        elSelectNative.value = value;
        updateCustomSelectChecked(value, e.target.textContent);
        closeSelectCustom();
      });
  
      elOption.addEventListener("mouseenter", (e) => {
        updateCustomSelectHovered(index);
      });
  
      // TODO: Toggle these event listeners based on selectCustom visibility
    });
  })
  
  


</script>